<div class="container">
  <div class="row-fluid">
    <h1 class="text-center heading">Check out the Musicians Wanted mobile application MW on the Apple App Store!</h1>
    <br/>
    <div>
      <h3>Below is the table for the RESTful Musicians Wanted API and making requests. All POST requests should be submitted as JSON and responses are returned as JSON.</h3>
      <p>
        If you have any problems or questions with documentation please create an issue on our <a href="https://github.com/caneroj1/team-ios">GitHub</a>.
      </p>
    </div>

    <div>
      <table class="col-md-1 table table-bordered table-hover">
      <tr>
      	<th class="heading">Prefix</th>
      	<th class="heading">Verb</th>
      	<th class="heading">URI Pattern</th>
      	<th class="heading">Description</th>
      </tr>
      <tr>
      	<td>root</td>
      	<td>GET</td>
      	<td>/</td>
      	<td>Route to render the MW API documentation.</td>
      </tr>
      <tr>
      	<td>api_user_musician_requests</td>
      	<td>POST</td>
      	<td>/api/users/:user_id/musician_requests(.:format)</td>
      	<td>Creates a new musician request for the specified user and creates a notification that will alert nearby users that a new musician request has been created.</td>
      </tr>
      <tr>
      	<td>events_api_user</td>
      	<td>GET</td>
      	<td>/api/users/:id/events(.:format) </td>
      	<td>Returns the list of this user's events.</td>
      </tr>
      <tr>
      	<td>messages_api_user</td>
      	<td>GET</td>
      	<td>/api/users/:id/messages(.:format)</td>
      	<td>Returns all of the received messages associated with a user.</td>
      </tr>
      <tr>
      	<td>sent_messages_api_user</td>
      	<td>GET</td>
      	<td>/api/users/:id/sent_messages(.:format)</td>
      	<td>Returns all of the sent messages associated with a user.</td>
      </tr>
      <tr>
      	<td>near_me_api_user</td>
      	<td>GET</td>
      	<td>/api/users/:id/near_me(.:format)</td>
      	<td>Does a search with the geocoder and finds all the users within the specified geographic area with the specified distance parameter.</td>
      </tr>
      <tr>
      	<td>events_near_me_api_user</td>
      	<td>GET</td>
      	<td>/api/users/:id/events_near_me(.:format)</td>
      	<td>Does a search with the geocoder and finds all the events within the specified geographic area with the specified distance parameter.</td>
      </tr>
      <tr>
      	<td>api_users</td>
      	<td>GET</td>
      	<td>/api/users(.:format)</td>
      	<td>Returns all users.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>POST</td>
      	<td>/api/users(.:format)</td>
      	<td>Accepts a hash of user attributes in order to create and save a new user.</td>
      </tr>
      <tr>
      	<td>api_user</td>
      	<td>GET</td>
      	<td>/api/users/:id(.:format)</td>
      	<td>Returns data for an individual user in json format. The user is specified by the id parameter in the route.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>PATCH</td>
      	<td>/api/users/:id(.:format)</td>
      	<td>Accepts a hash of user attributes that will be used to update the user's information.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>PUT</td>
      	<td>/api/users/:id(.:format)</td>
      	<td>Accepts a hash of user attributes that will be used to update the user's information.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>DELETE</td>
      	<td>/api/users/:id(.:format)</td>
      	<td>Destroys the specified user according to the passed in params.</td>
      </tr>
      <tr>
      	<td>creator_api_event</td>
      	<td>GET</td>
      	<td>/api/events/:id/creator(.:format)</td>
      	<td>Returns the user that created the specified event.</td>
      </tr>
      <tr>
      	<td>attendees_api_event</td>
      	<td>GET</td>
      	<td>/api/events/:id/attendees(.:format)</td>
      	<td>Returns the list of users that are attending the specified event. This includes the user who created the event.</td>
      </tr>
      <tr>
      	<td>attend_api_event</td>
      	<td>POST</td>
      	<td>/api/events/:id/attend(.:format)</td>
      	<td>This will add the specified user to the indicated event.</td>
      </tr>
      <tr>
      	<td>api_events</td>
      	<td>GET</td>
      	<td>/api/events(.:format)</td>
      	<td>Returns all of the events.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>POST</td>
      	<td>/api/events(.:format)</td>
      	<td>Creates an event according to params that are passed in and adds the creator of the event to the list of attendees</td>
      </tr>
      <tr>
      	<td>api_event</td>
      	<td>GET</td>
      	<td>/api/events/:id(.:format)</td>
      	<td>Returns information for a specific event.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>PATCH</td>
      	<td>/api/events/:id(.:format)</td>
      	<td>Updates an event according to the passed in params.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>PUT</td>
      	<td>/api/events/:id(.:format) </td>
      	<td>Updates an event according to the passed in params.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>DELETE</td>
      	<td>/api/events/:id(.:format)</td>
      	<td>Deletes an event according to the passed in params[:id].</td>
      </tr>
      <tr>
      	<td>api_message_replies</td>
      	<td>GET</td>
      	<td>/api/messages/:message_id/replies(.:format)</td>
      	<td>Returns all of the replies associated with a given message.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>POST</td>
      	<td>/api/messages/:message_id/replies(.:format)</td>
      	<td>Creates a new reply for the given message resulting in the creation of message threads.</td>
      </tr>
      <tr>
      	<td>api_message_reply</td>
      	<td>GET</td>
      	<td>/api/messages/:message_id/replies/:id(.:format)</td>
      	<td>Returns the info for a specific reply.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>DELETE</td>
      	<td>/api/messages/:message_id/replies/:id(.:format)</td>
      	<td>This will delete a reply.</td>
      </tr>
      <tr>
      	<td>api_messages</td>
      	<td>POST</td>
      	<td>/api/messages(.:format)</td>
      	<td>This will create a new message, and add it to the messages of the specified user, as well as mark it as being sent from the user who sent the request.</td>
      </tr>
      <tr>
      	<td>api_message</td>
      	<td>GET</td>
      	<td>/api/messages/:id(.:format)</td>
      	<td>Returns the json for a message.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>DELETE</td>
      	<td>/api/messages/:id(.:format)</td>
      	<td>Destroys the specified message</td>
      </tr>
      <tr>
      	<td>api_contactships</td>
      	<td>POST</td>
      	<td>/api/contactships(.:format)</td>
      	<td>This will create the specified contactship. We add a new contactship between the user and desired contact if it doesn't already exist.</td>
      </tr>
      <tr>
      	<td>api</td>
      	<td>GET</td>
      	<td>/api/contactships/contacts/:user_id(.:format)</td>
      	<td>This will return all of the contacts for the specified user.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>GET</td>
      	<td>/api/contactships/contacts/:user_id/remove/:contact_id(.:format)</td>
      	<td>This will delete the specified contactship from a user. It finds the user by the user_id and then it finds the contact by the contact_id.</td>
      </tr>
      <tr>
      	<td>N/A</td>
      	<td>GET</td>
      	<td>/api/contactships/contacts/:user_id/knows/:contact_id(.:format)</td>
      	<td>Returns true or false depending on if the user corresponding to :user_id has a contact by the id :contact_id.</td>
      </tr>
      <tr>
      	<td>api_notifications</td>
      	<td>GET</td>
      	<td>/api/notifications(.:format)</td>
      	<td>This gets all of the notifications given a certain user id. If there are no filters, we simply get the most recent 30 notifications. If there is a location, we get the most recent 30 locations near the user according to their search radius. Other search filters will be incorporated as needed.</td>
      </tr>
      <tr>
      	<td>api_s3ProfilePictureUpload</td>
      	<td>POST</td>
      	<td>/api/s3ProfilePictureUpload(.:format)</td>
      	<td>Loads the profile picture into the specified AWS S3 Bucket as base64.</td>
      </tr>
      <tr>
      	<td>api_s3EventPictureUpload</td>
      	<td>POST</td>
      	<td>/api/s3EventPictureUpload(.:format)</td>
      	<td>Loads the event picture into the specified AWS S3 Bucket as base64.</td>
      </tr>
      <tr>
      	<td>api_s3ProfileGet</td>
      	<td>GET</td>
      	<td>/api/s3ProfileGet(.:format)</td>
      	<td>Gets the profile picture from the specified AWS S3 Bucket as base64.</td>
      </tr>
      <tr>
      	<td>api_s3EventGet</td>
      	<td>GET</td>
      	<td>/api/s3EventGet(.:format)</td>
      	<td>Gets the event picture from the specified AWS S3 Bucket as base64.</td>
      </tr>
      <tr>
      	<td>api_login</td>
      	<td>POST</td>
      	<td>/api/login(.:format)</td>
      	<td>Authenticates the user credentials through the SoundCloud API and logs them in if successful.</td>
      </tr>
      <tr>
      	<td>api_subscribe</td>
      	<td>POST</td>
      	<td>/api/subscribe(.:format)</td>
      	<td>Subscribes the cell number to our AWS SNS notifications topic. Performs validation to see if the phone number is in this format: 1-xxx-xxx-xxxx. Also, the cell must be unique, and if the subscriber cannot update their cell number, then we return with an error. This route should ONLY be used when the user is creating their first subscription.</td>
      </tr>
      <tr>
      	<td>api_publish</td>
      	<td>POST</td>
      	<td>/api/publish(.:format)</td>
      	<td>Publishes a notification to the subscribers of the AWS topic.</td>
      </tr>
      <tr>
      	<td>api_resubscribe</td>
      	<td>POST</td>
      	<td>/api/resubscribe(.:format)</td>
      	<td>This will change a user's subscription. It has to find the user's subscription in the list of subscriptions maintained by Amazon. It searches by the cell number. Once it finds the subscription, it deletes it and then resubscribes the user with a different cell number</td>
      </tr>
      </table>
    </div>
  </div>
</div>
