<div class="container">
  <div class="row-fluid">
    <h1 class="text-center heading">Check out the Musicians Wanted mobile application MW on the Apple App Store!</h1>
    <br/>
    <div>
      <h3>Below is the table for the RESTful Musicians Wanted API and making requests. All POST requests should be submitted as JSON and responses are returned as JSON.</h3>
      <p>
        If you have any problems or questions with documentation please create an issue on our <a href="https://github.com/caneroj1/team-ios">GitHub</a>.
      </p>
    </div>
    <div>
      <table class="col-md-1 table table-bordered table-hover">
      <tr>
      	<th class="heading">Controller</th>
        <th class="heading">Format</th>
      	<th class="heading">Verb</th>
      	<th class="heading">URI Pattern</th>
      	<th class="heading">Description</th>
      </tr>
      <!--@api_documentation-->
<tr><td>sessions</td><td>json</td><td>POST</td><td>/api/login(.:format)</td><td>No route description.</td></tr><tr><td>notifications</td><td>json</td><td>GET</td><td>/api/notifications(.:format)</td><td>No route description.</td></tr><tr><td>musician_requests</td><td>json</td><td>POST</td><td>/api/users/:user_id/musician_requests(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users/:id/events(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users/:id/messages(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users/:id/sent_messages(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users/:id/near_me(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users/:id/events_near_me(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users/:id/attending(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>POST</td><td>/api/users(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>GET</td><td>/api/users/:id(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>PATCH</td><td>/api/users/:id(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>PUT</td><td>/api/users/:id(.:format)</td><td>No route description.</td></tr><tr><td>users</td><td>json</td><td>DELETE</td><td>/api/users/:id(.:format)</td><td>No route description.</td></tr><tr><td>events</td><td>json</td><td>GET</td><td>/api/events/:id/creator(.:format)</td><td>Returns json for the user that created the event specified by the id.
Params: id
</td></tr><tr><td>events</td><td>json</td><td>GET</td><td>/api/events/:id/attendees(.:format)</td><td>Gets the list of users that are attending the specified event,
(This includes the user who created the event if they didn't leave), and
returns json for the users.
Params: id
</td></tr><tr><td>events</td><td>json</td><td>POST</td><td>/api/events/:id/attend(.:format)</td><td>This will add the user specified by user_id to the
event specified by the id's list of attendees.
Params: id, user_id
</td></tr><tr><td>events</td><td>json</td><td>GET</td><td>/api/events(.:format)</td><td>This route returns all of the events.
</td></tr><tr><td>events</td><td>json</td><td>POST</td><td>/api/events(.:format)</td><td>Creates an event according to params that are passed in
and adds the creator of the event to the list of attendees automatically.
Params: event_attributes(title, location, description, event_time, description, created_by)
</td></tr><tr><td>events</td><td>json</td><td>GET</td><td>/api/events/:id(.:format)</td><td>Returns json information for a specific event.
Params: id
</td></tr><tr><td>events</td><td>json</td><td>PATCH</td><td>/api/events/:id(.:format)</td><td>Updates an event according to the passed in params.
Params: event_attributes(title, location, description, event_time, description, created_by)
</td></tr><tr><td>events</td><td>json</td><td>PUT</td><td>/api/events/:id(.:format)</td><td>Updates an event according to the passed in params.
Params: event_attributes(title, location, description, event_time, description, created_by)
</td></tr><tr><td>events</td><td>json</td><td>DELETE</td><td>/api/events/:id(.:format)</td><td>Destroys the event specified by the id.
Params: id
</td></tr><tr><td>replies</td><td>json</td><td>GET</td><td>/api/messages/:message_id/replies(.:format)</td><td>No route description.</td></tr><tr><td>replies</td><td>json</td><td>POST</td><td>/api/messages/:message_id/replies(.:format)</td><td>No route description.</td></tr><tr><td>replies</td><td>json</td><td>GET</td><td>/api/messages/:message_id/replies/:id(.:format)</td><td>No route description.</td></tr><tr><td>replies</td><td>json</td><td>DELETE</td><td>/api/messages/:message_id/replies/:id(.:format)</td><td>No route description.</td></tr><tr><td>messages</td><td>json</td><td>POST</td><td>/api/messages(.:format)</td><td>This will create a new message, and add it
to the messages of the specified user, as well as
mark it as being sent from the user who sent the request.
Params: message_attributes(subject, body, sent_by, user_id)
</td></tr><tr><td>messages</td><td>json</td><td>GET</td><td>/api/messages/:id(.:format)</td><td>Returns json data for the specified message.
Params: id
</td></tr><tr><td>messages</td><td>json</td><td>PATCH</td><td>/api/messages/:id(.:format)</td><td>This route changes the attributes of a message.
Params: message_attributesmessage_attributes(subject, body, sent_by, user_id, seen_by_sender, seen_by_receiver)
</td></tr><tr><td>messages</td><td>json</td><td>PUT</td><td>/api/messages/:id(.:format)</td><td>This route changes the attributes of a message.
Params: message_attributesmessage_attributes(subject, body, sent_by, user_id, seen_by_sender, seen_by_receiver)
</td></tr><tr><td>messages</td><td>json</td><td>DELETE</td><td>/api/messages/:id(.:format)</td><td>Destroys the specified message and any replies.
Params: id
</td></tr><tr><td>contactships</td><td>json</td><td>POST</td><td>/api/contactships(.:format)</td><td>This will create the specified contactship. The API adds a new contactship
between the user and desired contact only if it doesn't already exist.
Params: user_id, contact_id
</td></tr><tr><td>contactships</td><td>json</td><td>GET</td><td>/api/contactships/contacts/:user_id(.:format)</td><td>This will return all of the contacts for the specified user.
Params: user_id
</td></tr><tr><td>contactships</td><td>json</td><td>DELETE</td><td>/api/contactships/contacts/:user_id/remove/:contact_id(.:format)</td><td>This will delete the specified contactship from a user. It finds the user
by the user_id and then it finds the contact by the contact_id
Params: user_id, contact_id
</td></tr><tr><td>contactships</td><td>json</td><td>GET</td><td>/api/contactships/contacts/:user_id/knows/:contact_id(.:format)</td><td>Returns true or false depending on if the user corresponding to :user_id
has a contact by the with id = contact_id.
Params: user_id, contact_id
</td></tr><tr><td>s3_storages</td><td>json</td><td>POST</td><td>/api/s3ProfilePictureUpload(.:format)</td><td>No route description.</td></tr><tr><td>s3_storages</td><td>json</td><td>POST</td><td>/api/s3EventPictureUpload(.:format)</td><td>No route description.</td></tr><tr><td>s3_storages</td><td>json</td><td>GET</td><td>/api/s3ProfileGet(.:format)</td><td>No route description.</td></tr><tr><td>s3_storages</td><td>json</td><td>GET</td><td>/api/s3EventGet(.:format)</td><td>No route description.</td></tr><tr><td>sns_notifications</td><td>json</td><td>POST</td><td>/api/subscribe(.:format)</td><td>No route description.</td></tr><tr><td>sns_notifications</td><td>json</td><td>POST</td><td>/api/publish(.:format)</td><td>No route description.</td></tr><tr><td>sns_notifications</td><td>json</td><td>POST</td><td>/api/resubscribe(.:format)</td><td>No route description.</td></tr>
<!--@end_documentation-->
      </table>
    </div>
  </div>
</div>
